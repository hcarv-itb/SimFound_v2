{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Visualization tutorial"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3a12d0441ae844f0a442964615bde79c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import os\n",
    "import path\n",
    "import nglview\n",
    "import sys\n",
    "import importlib\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "#%matplotlib notebook\n",
    "\n",
    "base_path=os.path.abspath('C:/Users/hcarv/Desktop/figures')\n",
    "data_path=os.path.abspath('C:/Users/hcarv/Documents/work/notebook_results')\n",
    "sys.path.append(base_path)\n",
    "sys.path.append(data_path)\n",
    "\n",
    "import visual\n",
    "importlib.reload(visual)\n",
    "results=base_path"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Density descriptors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "30"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "importlib.reload(visual)\n",
    "stride=1\n",
    "\n",
    "\n",
    "figures={\n",
    "    '50mM':[3, 9, 17], \n",
    "    '150mM':[3, 11, 19], \n",
    "    '300mM':[3, 11, 19], \n",
    "    '600mM':[3, 11, 27], \n",
    "    '1M':[3, 11, 27], \n",
    "    '2.5M':[7, 15, 31], \n",
    "    '5.5M':[7, 15, 31]}\n",
    "\n",
    "states=[('SB', 3), \n",
    "        ('PB',9), \n",
    "        ('AB', 17), \n",
    "        ('PSB', 11), \n",
    "        ('ASB', 19), \n",
    "        ('APSB', 27), \n",
    "        ('ESB', 7), \n",
    "        ('PESB', 15), \n",
    "        ('APESB', 31)]\n",
    "\n",
    "stride=1\n",
    "stat_dist=pd.read_csv(f'{data_path}\\kNAC_hist2-calb-MeOH_5-4.5-24.0.csv', index_col=0)\n",
    "#stat_dist\n",
    "\n",
    "iso_levels=visual.plot_densityStats(figures, results, stride, states, stat_dist=stat_dist)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'50mM': [0.096884954759119, 1.159999246267684, 9.073983175039288],\n",
       " '150mM': [0.252295807588673, 0.283116113613005, 0.337137881396879],\n",
       " '300mM': [0.469390392218617, 0.485502206280883, 0.576175892099996],\n",
       " '600mM': [0.963880276489474, 0.872837052135633, 0.89823598324857],\n",
       " '1M': [2.138767286234144, 1.462546666107841, 1.349536834456387],\n",
       " '2.5M': [4.650185369489329, 3.201075908409909, 3.155253978154407],\n",
       " '5.5M': [41.51347302580475, 6.824795356888476, 6.661842107335743]}"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iso_levels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'50mM': [0.193769909518238, 1.159999246267684, 9.073983175039288],\n",
       " '150mM': [0.504591615177346, 0.56623222722601, 0.674275762793758],\n",
       " '300mM': [0.938780784437234, 0.971004412561766, 1.152351784199992],\n",
       " '600mM': [1.927760552978948, 1.745674104271266, 1.79647196649714],\n",
       " '1M': [4.277534572468288, 2.925093332215682, 2.699073668912774],\n",
       " '2.5M': [9.300370738978659, 6.402151816819818, 6.310507956308814],\n",
       " '5.5M': [83.0269460516095, 13.649590713776952, 13.323684214671486]}"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "double=[('50mM', [True, False, False]), \n",
    "        ('150mM',[True, True, True]), \n",
    "        ('300mM', [True, True, True]), \n",
    "        ('600mM', [True, True, True]), \n",
    "        ('1M', [True, True, True]), \n",
    "        ('2.5M', [True, True, True]), \n",
    "        ('5.5M', [True, True, True])]\n",
    "\n",
    "iso_levels_mod={}\n",
    "\n",
    "for x in double:\n",
    "    mods=[]\n",
    "    for idx, y in enumerate(x[1]):\n",
    "        original=iso_levels[x[0]][idx]\n",
    "        new=original*2\n",
    "        if y == True:\n",
    "            mods.append(new)\n",
    "        else:\n",
    "            mods.append(original)\n",
    "            \n",
    "        iso_levels_mod[x[0]]=mods\n",
    "iso_levels_mod"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Graphical Interface"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "importlib.reload(visual)\n",
    "visualizations=visual.get_visualizations(figures, iso_levels_mod, states, stride, results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#figures={\n",
    "#    '50mM':[3, 9, 17], \n",
    "#    '150mM':[3, 11, 19], \n",
    "#    '300mM':[3, 11, 19], \n",
    "#    '600mM':[3, 11, 27], \n",
    "#    '1M':[3, 11, 27], \n",
    "#    '2.5M':[7, 15, 31], \n",
    "#    '5.5M':[7, 15, 31]}\n",
    "importlib.reload(visual)\n",
    "view, file=visual.graphical(visualizations)\n",
    "view\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "importlib.reload(visual)\n",
    "\n",
    "structures={'50mM':[17], '150mM':[19], '300mM':[19], '1M':[27], '5.5M':[31]} #, \n",
    "#    '150mM':[3, 11, 19], \n",
    "#    '300mM':[3, 11, 19], \n",
    "#    '600mM':[3, 11, 27], \n",
    "#    '1M':[3, 11, 27], \n",
    "#    '2.5M':[7, 15, 31], \n",
    "#    '5.5M':[7, 15, 31]}\n",
    "\n",
    "\n",
    "\n",
    "visualizations_multiple=visual.get_visualizations_multiple(structures, states, stride, results)\n",
    "view_methanol, file_methanol=visual.graphical_multiple(visualizations_multiple)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "view_methanol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "view_methanol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "view_methanol.download_image(filename=file_methanol, factor=5, transparent=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "importlib.reload(visual)\n",
    "stride_full=5\n",
    "iso_levels_full=visual.plot_densityStats_full(figures, results, stride_full, stat_dist=stat_dist)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "importlib.reload(visual)\n",
    "visualizations_full=visual.get_visualizations_full(figures, iso_levels_full, stride_full, results)\n",
    "visualizations_full"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "view_full, file_full=visual.graphical_full(visualizations_full)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "struct=os.path.abspath('C:/Users/hcarv/Desktop/figures/superposed_5.5M-s5-clusters.pdb')\n",
    "dens=os.path.abspath('C:/Users/hcarv/Desktop/figures/superposed_5.5M-s5-Molar.dx')\n",
    "iso=0.2\n",
    "view=visual.view_presets(struct, dens, iso)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "view"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "view"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "view.download_image(filename='superposed_2.5M-s5-iso0.2.png', factor=5, transparent=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
